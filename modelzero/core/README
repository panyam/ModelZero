
One risk is we may be doing two different things
Describe both the "target" schema as well as the rules to convert
one to another.  There are a couple of issues here:
If we provide a derivation to go from A -> B
Should there be one to go from B -> A?
What if it were A,B,C -> D?
A good example is a record that is a hierarchical datamap to a flattened
representation.  This is a 1:1 mapping.

The mappings while reversible may not be "complete".  For example
a projection to extract a subset of fields cannot be reversed
to recover "rejected" fields.  In such cases it may not make sense
auto generate the mapping rules.

A derivation should really be source types + dest types + mapping rules.

SQL is a data-access dsl.  It thankfully results in a "target type" but 
realy is about data-access and computation.
Same with GraphQL.  It lets us specify "fetching" from N sources 
into a new type.  The mechanics of the fetch is done by the engine.

Where the two differ is SQL gets form N sources and returns flattened data
GraphQL expands out fields

But isnt this what derivation gives us?

eg 

derive (a : X, b : Y, c : Z, d : List[D]) {
    a       // creates top level field "a" which is a copy of a
    b.y     // top level field called y - same as b.y
    b {
        y   // creates top level field b and a nested field y that is b.y
        c/x // creates "b.x which is a copy of c.x
    }
    c {
        a   // Should this refer to top level "a" or "c.a" ?
            // To disambiguate, use:
            // $ . a
            // But internally we would store "full" field paths so 
            // this ambiguity would not arise
    }
    d : {
    }
}


GraphQL Samples:

```
{
  me {
    id
    firstName
    lastName
    birthday {
      month
      day
    }
    friends {
      name
    }
  }
}
```

Returns:

```
d = Derivation(me : User, friends : List[User]) {
    select("me", Derivation(User) {
        select("id")
        select("firstName")
        select("lastName")
        select(birthday, Derivation(Date) {
            include("month")
            include("day")
        })
    }
    select("friends", FMap[Derivation(User) {
        select("name")
    }]
}

```

Sample:

```
{
  user(id: 4) {
    name
  }
}
```

Returns:

```
d = Derivation(User) { select("name") }
d(user_engine.get(4)) # Returns an object of type d.logical_type
```


Sample:

```
{
  user(id: 4) {
    id
    name
    profilePic(size: 100)
  }
}
```

Returns:

```
d = Derivation(User) {
    "id": Select(),
    "name": Select(),
    "profilePic: Eval("profile_pic_getter", id = id, size = 100)
}
d(user_engine.get(4))

or

Derivation() {
    eval("user", ("get_user", id = 4), Derivation(User) {
        "id": Select(),
        "name": Select(),
        "profilePic: Eval("profile_pic_getter", id = id, size = 100)
    })
}
```

Sample without fragments:

```
query noFragments {
  user(id: 4) {
    friends(first: 10) {
      id
      name
      profilePic(size: 50)
    }
    mutualFriends(first: 10) {
      id
      name
      profilePic(size: 50)
    }
  }
}
```

Returns:

```
Derivation() {
    "user": Eval("get_user", id = 4).FMap(Derivation(User) {
        "friends": Eval("get_friends", id = 4, first = 10).FMap(Derivation(Friend) {
            "id": Select(),
            "name": Select(),
            "profilePic": Eval("profile_pic_getter", id = "$user.id", size = 50)
        })
        "mutualFriends": Eval("get_mutual_friends", id = 4, first = 10).FMap(Derivation(Friend) {
            "id": Select(),
            "name": Select(),
            "profilePic": Eval("profile_pic_getter", id = "$user.id", size = 50)
        })
    }
}
```


Sample with fragments:

```
query withFragments {
  user(id: 4) {
    friends(first: 10) {
      ...friendFields
    }
    mutualFriends(first: 10) {
      ...friendFields
    }
  }
}

fragment friendFields on User {
  id
  name
  profilePic(size: 50)
}
```

Should Return:

```
FriendFields = Derivation(User) {
    "id": Select(),
    "name": Select(),
    "profilePic": Eval("profile_pic", size = 50)
}

return Derivation() {
    "user": Eval("get_user", id = 4).Apply(Derivation(User) {
        "friends": Eval("get_friends", id = 4, first = 10).FMap(FriendFields)
        "mutualFriends": Eval("get_mutual_friends", id = 4, first = 10).FMap(FriendFields)
    })
}
```

Sample with multilevel fragments:

```
query withNestedFragments {
  user(id: 4) {
    friends(first: 10) {
      ...friendFields
    }
    mutualFriends(first: 10) {
      ...friendFields
    }
  }
}

fragment friendFields on User {
  id
  name
  ...standardProfilePic
}

fragment standardProfilePic on User {
  profilePic(size: 50)
}
```

Returns:

```
StandardProfilePic = Derivation(User) {
    Eval("profilePic", "profile_pic", id = id, size = 50)
}

FriendFields = Derivation(User, [
    Select("id"),
    Include(StandardProfilePic, 0   /* 0 refers to which argument the fragment is being applied on */)
    Select("name"),
    Eval("profilePic", "profile_pic", id = id, size = 50)
]
d = Derivation() {
    "user": Eval("get_user", id = 4).Apply(Derivation(User) {
        "friend": Eval("get_friends", id = 4, first = 10).FMap(FriendFields)
    })
}
```

Sample with fragment typing:

```
query FragmentTyping {
  profiles(handles: ["zuck", "cocacola"]) {
    handle
    ...userFragment
    ...pageFragment
  }
}

fragment userFragment on User {
  friends {
    count
  }
}

fragment pageFragment on Page {
  likers {
    count
  }
}
```

# Do we need Unions here?

```
UserFragment = Derivation(User) {
    Eval("friends", "get_friends").FMap(Derivation(User) { Select("count") })
}

PageFragment = Derivation(User) {
    Eval("likers", "get_likers").FMap(Derivation(Page) { Select("count") })
}

return Derivation() {
    Eval("profiles", "get_profiles", handles = ["zuck", "cocacola"]).FMap(Derivation(Profile) {
        Select("handle")
        Include("UserFragment", 0)
        Include("PageFragment", 0)  // how to do type checks?
    })
}
```
